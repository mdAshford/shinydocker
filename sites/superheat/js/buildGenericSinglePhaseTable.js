// ['P [MPa]','t [℃]','v [cm³/g]','h [kJ/kg]','s [kJ/kg-K]']
function buildGenericSinglePhaseTable () {
   var ptvuhs;				// the entire 2-dim singlephase data array
   var ptvuhsHTML;		// 2d singlephase array in html
   var tvuhs;				// array of 2d arrays tvuhs. tvuhs[n] corresponds with p[n]
   var p;					// 1d array of pressures from the ptvuhs table
   var tvuhs_tmp;			// temporary variable for building tvuhs 2d arrays
   var i, r, index_p, index_t, index_tvuhs;		// counters
   var tvuhsMaxLength;  			// length of longest tvuhs array
   var theadRow1, theadRow2;		// HTML text

	// the source data, formatted as ptvuhs = [p,[t,v,u,h,s]]    [IAPWS95 tables]
ptvuhs =
[[0.006,36.16,23.739,2425,2567.4,8.3304],[0.006,80,27.132,2487.3,2650.1,8.5804],[0.006,120,30.219,2544.7,2726,8.784],[0.006,160,33.302,2602.7,2802.5,8.9693],[0.006,200,36.383,2661.4,2879.7,9.1398],[0.006,240,39.462,2721,2957.8,9.2982],[0.006,280,42.54,2781.5,3036.8,9.4464],[0.006,320,45.618,2843,3116.7,9.5859],[0.006,360,48.696,2905.5,3197.7,9.718],[0.006,400,51.774,2969,3279.6,9.8435],[0.006,440,54.851,3033.5,3362.6,9.9633],[0.006,500,59.467,3132.3,3489.1,10.1336],[0.035,72.69,4.526,2473,2631.4,7.7158],[0.035,80,4.625,2483.7,2645.6,7.7564],[0.035,120,5.163,2542.4,2723.1,7.9644],[0.035,160,5.696,2601.2,2800.6,8.1519],[0.035,200,6.228,2660.4,2878.4,8.3237],[0.035,240,6.758,2720.3,2956.8,8.4828],[0.035,280,7.287,2780.9,3036,8.6314],[0.035,320,7.815,2842.5,3116.1,8.7712],[0.035,360,8.344,2905.1,3197.1,8.9034],[0.035,400,8.872,2968.6,3279.2,9.0291],[0.035,440,9.4,3033.2,3362.2,9.149],[0.035,500,10.192,3132.1,3488.8,9.3194],[0.07,89.95,2.365,2494.5,2660,7.4797],[0.07,100,2.434,2509.7,2680,7.5341],[0.07,120,2.571,2539.7,2719.6,7.6375],[0.07,160,2.841,2599.4,2798.2,7.8279],[0.07,200,3.108,2659.1,2876.7,8.0012],[0.07,240,3.374,2719.3,2955.5,8.1611],[0.07,280,3.64,2780.2,3035,8.3162],[0.07,320,3.905,2842,3115.3,8.4504],[0.07,360,4.17,2904.6,3196.5,8.5828],[0.07,400,4.434,2968.2,3278.6,8.7086],[0.07,440,4.698,3032.9,3361.8,8.8286],[0.07,500,5.095,3131.8,3488.5,8.9991],[0.1,99.63,1.694,2506.1,2675.5,7.3594],[0.1,100,1.696,2506.7,2676.2,7.3614],[0.1,120,1.793,2537.3,2716.6,7.4668],[0.1,160,1.984,2597.8,2796.2,7.6597],[0.1,200,2.172,2658.1,2875.3,7.8343],[0.1,240,2.359,2718.5,2954.5,7.9949],[0.1,280,2.546,2779.6,3034.2,8.1445],[0.1,320,2.732,2841.5,3114.6,8.2849],[0.1,360,2.917,2904.2,3195.9,8.4175],[0.1,400,3.103,2967.9,3278.2,8.5435],[0.1,440,3.288,3032.6,3361.4,8.6636],[0.1,500,3.565,3131.6,3488.1,8.8342],[0.15,111.37,1.159,2519.7,2693.6,7.2233],[0.15,120,1.188,2533.3,2711.4,7.2693],[0.15,160,1.317,2595.2,2792.8,7.4665],[0.15,200,1.444,2656.2,2872.9,7.6433],[0.15,240,1.57,2717.2,2952.7,7.8052],[0.15,280,1.695,2778.6,3032.8,7.9555],[0.15,320,1.819,2840.6,3113.5,8.0964],[0.15,360,1.943,2903.5,3195,8.2293],[0.15,400,2.067,2967.3,3277.4,8.3555],[0.15,440,2.191,3032.1,3360.7,8.4757],[0.15,500,2.376,3131.2,3487.6,8.6466],[0.15,600,2.685,3301.7,3704.3,8.9101],[0.3,133.55,0.606,2543.6,2725.3,6.9919],[0.3,160,0.651,2587.1,2782.3,7.1276],[0.3,200,0.716,2650.7,2865.5,7.3115],[0.3,240,0.781,2713.1,2947.3,7.4774],[0.3,280,0.844,2775.4,3028.6,7.6299],[0.3,320,0.907,2838.1,3110.1,7.7722],[0.3,360,0.969,2901.4,3192.2,7.9061],[0.3,400,1.032,2965.6,3275,8.033],[0.3,440,1.094,3030.6,3358.7,8.1538],[0.3,500,1.187,3130,3486,8.3251],[0.3,600,1.341,3300.8,3703.2,8.5892],[0.5,151.86,0.3749,2561.2,2748.7,6.8213],[0.5,180,0.4045,2609.7,2812,6.9656],[0.5,200,0.4249,2642.9,2855.4,7.0592],[0.5,240,0.4646,2707.6,2939.9,7.2307],[0.5,280,0.5034,2771.2,3022.9,7.3865],[0.5,320,0.5416,2834.7,3105.6,7.5308],[0.5,360,0.5796,2898.7,3188.4,7.666],[0.5,400,0.6173,2963.2,3271.9,7.7938],[0.5,440,0.6548,3028.6,3356,7.9152],[0.5,500,0.7109,3128.4,3483.9,8.0873],[0.5,600,0.8041,3299.6,3701.7,8.3522],[0.5,700,0.8969,3477.5,3925.9,8.5952],[0.7,164.97,0.2729,2572.5,2763.5,6.708],[0.7,180,0.2847,2599.8,2799.1,6.788],[0.7,200,0.2999,2634.8,2844.8,6.8865],[0.7,240,0.3292,2701.8,2932.2,7.0641],[0.7,280,0.3574,2766.9,3017.1,7.2233],[0.7,320,0.3852,2831.3,3100.9,7.3697],[0.7,360,0.4126,2895.8,3184.7,7.5063],[0.7,400,0.4397,2960.9,3268.7,7.635],[0.7,440,0.4667,3026.6,3353.3,7.7571],[0.7,500,0.507,3126.8,3481.7,7.9299],[0.7,600,0.5738,3298.5,3700.2,8.1956],[0.7,700,0.6403,3476.6,3924.8,8.4391],[1,179.91,0.1944,2583.6,2778.1,6.5865],[1,200,0.206,2621.9,2827.9,6.694],[1,240,0.2275,2692.9,2920.4,6.8817],[1,280,0.248,2760.2,3008.2,7.0465],[1,320,0.2678,2826.1,3093.9,7.1962],[1,360,0.2873,2891.6,3178.9,7.3349],[1,400,0.3066,2957.3,3263.9,7.4651],[1,440,0.3257,3023.6,3349.3,7.5883],[1,500,0.3541,3124.4,3478.5,7.7622],[1,540,0.3729,3192.6,3565.6,7.872],[1,600,0.4011,3296.8,3697.9,8.029],[1,640,0.4198,3367.4,3787.2,8.129],[1.5,198.32,0.1318,2594.5,2792.2,6.4448],[1.5,200,0.1325,2598.1,2796.8,6.4546],[1.5,240,0.1483,2676.9,2899.3,6.6628],[1.5,280,0.1627,2748.6,2992.7,6.8381],[1.5,320,0.1765,2817.1,3081.9,6.9938],[1.5,360,0.1899,2884.4,3169.2,7.1363],[1.5,400,0.203,2951.3,3255.8,7.269],[1.5,440,0.216,3018.5,3342.5,7.394],[1.5,500,0.2352,3120.3,3473.1,7.5698],[1.5,540,0.2478,3189.1,3560.9,7.6805],[1.5,600,0.2668,3293.9,3694,7.8385],[1.5,640,0.2793,3364.8,3783.8,7.9391],[2,212.42,0.0996,2600.3,2799.5,6.3409],[2,240,0.1085,2659.6,2876.5,6.4952],[2,280,0.12,2736.4,2976.4,6.6828],[2,320,0.1308,2807.9,3069.5,6.8452],[2,360,0.1411,2877,3159.3,6.9917],[2,400,0.1512,2945.2,3247.6,7.1271],[2,440,0.1611,3013.4,3335.5,7.254],[2,500,0.1757,3116.2,3467.6,7.4317],[2,540,0.1853,3185.6,3556.1,7.5434],[2,600,0.1996,3290.9,3690.1,7.7024],[2,640,0.2091,3362.2,3780.4,7.8035],[2,700,0.2232,3470.9,3917.4,7.9487],[3,233.90,0.0667,2604.1,2804.2,6.1869],[3,240,0.0682,2619.7,2824.3,6.2265],[3,280,0.0771,2709.9,2941.3,6.4462],[3,320,0.085,2788.4,3043.4,6.6245],[3,360,0.0923,2861.7,3138.7,6.7801],[3,400,0.0994,2932.8,3230.9,6.9212],[3,440,0.1062,3002.9,3321.5,7.052],[3,500,0.1162,3108,3456.5,7.2338],[3,540,0.1227,3178.4,3546.6,7.3474],[3,600,0.1324,3285,3682.3,7.5085],[3,640,0.1388,3357,3773.5,7.6106],[3,700,0.1484,3466.5,3911.7,7.7571],[4,250.4,0.04978,2602.3,2801.4,6.0701],[4,280,0.05546,2680,2901.8,6.2568],[4,320,0.06199,2767.4,3015.4,6.4553],[4,360,0.06788,2845.7,3117.2,6.6215],[4,400,0.07341,2919.9,3213.6,6.769],[4,440,0.07872,2992.2,3307.1,6.9041],[4,500,0.08643,3099.5,3445.3,7.0901],[4,540,0.09145,3171.1,3536.9,7.2056],[4,600,0.09885,3279.1,3674.4,7.3688],[4,640,0.1037,3351.8,3766.6,7.472],[4,700,0.111,3462.1,3905.9,7.6198],[4,740,0.1157,3536.6,3999.6,7.7141],[6,275.64,0.03244,2589.7,2784.3,5.8892],[6,280,0.03317,2605.2,2804.2,5.9252],[6,320,0.03876,2720,2952.6,6.1846],[6,360,0.04331,2811.2,3071.1,6.3782],[6,400,0.04739,2892.9,3177.2,6.5408],[6,440,0.05122,2970,3277.3,6.6853],[6,500,0.05665,3082.2,3422.2,6.8803],[6,540,0.06015,3156.1,3517,6.9999],[6,600,0.06525,3266.9,3658.4,7.1677],[6,640,0.06859,3341,3752.6,7.2731],[6,700,0.07352,3453.1,3894.1,7.4234],[6,740,0.07677,3528.3,3989.2,7.519],[8,295.06,0.02352,2569.8,2758,5.7432],[8,320,0.02682,2662.7,2877.2,5.9489],[8,360,0.03089,2772.7,3019.8,6.1819],[8,400,0.03432,2863.8,3138.3,6.3634],[8,440,0.03742,2946.7,3246.1,6.519],[8,480,0.04034,3025.7,3348.4,6.6586],[8,520,0.04313,3102.7,3447.7,6.7871],[8,560,0.04582,3178.7,3545.3,6.9072],[8,600,0.04845,3254.4,3642,7.0206],[8,640,0.05102,3330.1,3738.3,7.1283],[8,700,0.05481,3443.9,3882.4,7.2812],[8,740,0.05729,3520.4,3978.7,7.3782],[10,311.06,0.01803,2544.4,2724.7,5.6141],[10,320,0.01925,2588.8,2781.3,5.7103],[10,360,0.02331,2729.1,2962.1,6.006],[10,400,0.02641,2832.4,3096.5,6.212],[10,440,0.02911,2922.1,3213.2,6.3805],[10,480,0.0316,3005.4,3321.4,6.5282],[10,520,0.03394,3085.6,3425.1,6.6622],[10,560,0.03619,3164.1,3526,6.7864],[10,600,0.03837,3241.7,3625.3,6.9029],[10,640,0.04048,3318.9,3723.7,7.0131],[10,700,0.04358,3434.7,3870.5,7.1687],[10,740,0.0456,3512.1,3968.1,7.267],[12,324.75,0.01426,2513.7,2684.9,5.4924],[12,360,0.01811,2678.4,2895.7,5.8361],[12,400,0.02108,2798.3,3051.3,6.0747],[12,440,0.02355,2896.1,3178.7,6.2586],[12,480,0.02576,2984.4,3293.5,6.4154],[12,520,0.02781,3068,3401.8,6.5555],[12,560,0.02977,3149,3506.2,6.684],[12,600,0.03164,3228.7,3608.3,6.8037],[12,640,0.03345,3307.5,3709,6.9164],[12,700,0.0361,3425.2,3858.4,7.0749],[12,740,0.03781,3503.7,3957.4,7.1746],[14,336.75,0.01149,2476.8,2637.6,5.3717],[14,360,0.01422,2617.4,2816.5,5.6602],[14,400,0.01722,2760.9,3001.9,5.9448],[14,440,0.01954,2868.6,3142.2,6.1474],[14,480,0.02157,2962.5,3264.5,6.3143],[14,520,0.02343,3049.8,3377.8,6.461],[14,560,0.02517,3133.6,3486,6.5941],[14,600,0.02683,3215.4,3591.1,6.7172],[14,640,0.02843,3296,3694.1,6.8326],[14,700,0.03075,3415.7,3846.2,6.9939],[14,740,0.03225,3495.2,3946.7,7.0952],[16,347.44,0.00931,2431.7,2580.6,5.2455],[16,360,0.01105,2539,2715.8,5.4614],[16,400,0.01426,2719.4,2947.6,5.8175],[16,440,0.01652,2839.4,3103.7,6.0429],[16,480,0.01842,2939.7,3234.4,6.2215],[16,520,0.02013,3031.1,3353.3,6.3752],[16,560,0.02172,3117.8,3465.4,6.5132],[16,600,0.02323,3201.8,3573.5,6.6399],[16,640,0.02467,3284.2,3678.9,6.758],[16,700,0.02674,3406,3833.9,6.9224],[16,740,0.02808,3486.7,3935.9,7.0251],[18,357.06,0.00749,2374.3,2509.1,5.1044],[18,360,0.00809,2418.9,2564.5,5.1922],[18,400,0.0119,2672.8,2887,5.6887],[18,440,0.01414,2808.2,3062.8,5.9428],[18,480,0.01596,2915.9,3203.2,6.1345],[18,520,0.01757,3011.8,3378,6.296],[18,560,0.01904,3101.7,3444.4,6.4392],[18,600,0.02042,3188,3555.6,6.5696],[18,640,0.02174,3272.3,3663.6,6.6905],[18,700,0.02362,3396.3,3821.5,6.858],[18,740,0.02483,3478,3925,6.9623],[20,365.81,0.00583,2293,2409.7,4.9269],[20,400,0.00994,2619.3,2818.1,5.554],[20,440,0.01222,2774.9,3019.4,5.845],[20,480,0.01399,2891.2,3170.8,6.0518],[20,520,0.01551,2992,3302.2,6.2218],[20,560,0.01689,3085.2,3423,6.3705],[20,600,0.01818,3174,3537.6,6.5048],[20,640,0.0194,3260.2,3648.1,6.6286],[20,700,0.02113,3386.4,3809,6.7993],[20,740,0.02224,3469.3,3914.1,6.9052],[20,800,0.02385,3592.7,4069.7,7.0544],[24,400,0.00673,2477.8,2639.4,5.2393],[24,440,0.00929,2700.6,2923.4,5.6506],[24,480,0.011,2838.3,3102.3,5.895],[24,520,0.01241,2950.5,3248.5,6.0842],[24,560,0.01366,3051.1,3379,6.2448],[24,600,0.01481,3145.2,3500.7,6.3875],[24,640,0.01588,3235.5,3616.7,6.5174],[24,700,0.01739,3366.4,3783.8,6.6947],[24,740,0.01835,3451.7,3892.1,6.8038],[24,800,0.01974,3578,4051.6,6.9567],[28,400,0.00383,2223.5,2330.7,4.7494],[28,440,0.00712,2613.2,2812.6,5.4494],[28,480,0.00885,2780.8,3028.5,5.7446],[28,520,0.0102,2906.8,3192.3,5.9566],[28,560,0.01136,3015.7,3333.7,6.1307],[28,600,0.01241,3115.6,3463,6.2823],[28,640,0.01338,3210.3,3584.8,6.4187],[28,700,0.01473,3346.1,3758.4,6.6029],[28,740,0.01558,3433.9,3870,6.7153],[28,800,0.0168,3563.1,4033.4,6.872],[28,900,0.01873,3774.3,4298.8,7.1084],[32,400,0.00236,1980.4,2055.9,4.3239],[32,440,0.00544,2509,2683,5.2327],[32,480,0.00722,2718.1,2949.2,5.5968],[32,520,0.00853,2860.7,3133.7,5.8357],[32,560,0.00963,2979,3287.2,6.0246],[32,600,0.01061,3085.3,3424.6,6.1858],[32,640,0.0115,3184.5,3552.5,6.329],[32,700,0.01273,3325.4,3732.8,6.5203],[32,740,0.0135,3415.9,3847.8,6.6361],[32,800,0.0146,3548,4015.1,6.7966],[32,900,0.01633,3762.7,4285.1,7.0372]];

// console.log('ptvuhs length: ' + ptvuhs.length);

   // build p, tvuhs arrays. lets us reference p and corresponding tvuhs more easily
   p = [ptvuhs[0][0]];								// initialize with pressure ptvuhs first row
   tvuhs_tmp = [ptvuhs[0].slice(1)];			// initialize with first tvuhs vector belonging to the first pressure

// console.log('ptvuhs[0].slice(1):'+tvuhs_tmp );

   index_p = 0;
   tvuhs = [0];

   for ( r = 1; r < ptvuhs.length; r++) {
   	if ( p.includes(ptvuhs[r][0]) ) {				// ok. if true, we've seen this pressure before,
         tvuhs_tmp.push(ptvuhs[r].slice(1));			// so add a row to current tvuhs array
      }
      else {
// console.log ('tvuhs_tmp: ' + tvuhs_tmp);
         tvuhs[index_p] = tvuhs_tmp;					// assign tvuhs to current pressure
         index_p++;											// increment index_p on p vector
         p.push(ptvuhs[r][0]);							// add new p to pressure vector
         tvuhs_tmp =[ ptvuhs[r].slice(1) ];			// initialize tvhs for new p
      }
   }
   tvuhs[index_p] = tvuhs_tmp;		// assign last tvhs and
                                    // the data table is built!!!

// console.log('tvuhs[10]:'+tvuhs[10]+'  tvuhs[10].length:'+tvuhs[10].length+'   p[10]:'+p[10]);

   // now we build the entire html table ptvuhsHTML (minified) in text for use in an innerHTML call
   // build the top header row and determine longest tvuhs array
   tvuhsMaxLength = 0;
   ptvuhsHTML = '<thead>';
   theadRow1 = '<tr>';
   theadRow2 = '<tr>';
   for (index_p = 0; index_p < p.length; index_p++) {
      theadRow1 += '<th colspan="' + (ptvuhs[0].length - 1) + '">' + p[index_p] + ' MPa</th>';
      theadRow2 += '<th>T <span class="uNits">&#x00b0;C</span></th>'
            + '<th>v <span class="uNits">cm<sup>3</sup>/kg</span></th>'
            + '<th>u <span class="uNits">kJ/kg</span></th>'
            + '<th>h <span class="uNits">kJ/kg</span></th>'
            + '<th>s <span class="uNits">kJ/kg-K</span></th>';
      // while we're here, determine the length of the longest temperature vector
      tvuhsMaxLength = Math.max(tvuhsMaxLength,tvuhs[index_p].length);
   };	// end for index_p

   theadRow1 += '</tr>';	// close out the row
   theadRow2 += '</tr>';	// close out the row

// console.log('tvuhsMaxLength: '+tvuhsMaxLength);
// console.log('p.length: '+p.length);
// console.log('ptvuhs[0].length: '+ptvuhs[0].length);
   // console.log('temps:'+tvuhs)

   ptvuhsHTML += theadRow1 + theadRow2 + '</thead>';		// add to table declaration with thead closeout
   // thead section is now complete

   // now build the tbody rows
   ptvuhsHTML += '<tbody>';
   for (index_t = 0; index_t < tvuhsMaxLength; index_t++) {
      tvuhs_tmp = '<tr>';                   // we're building a row, yall
      for (index_p = 0; index_p < p.length; index_p++) {
         if (index_t < tvuhs[index_p].length) {
            tvuhs_tmp += '<th>'+tvuhs[index_p][index_t][0]+'</th>'; // insert temperature head cell
            for ( index_tvuhs = 1; index_tvuhs < tvuhs[index_p][index_t].length; index_tvuhs++) {   // traverse the row to capture vuhs
            	tvuhs_tmp += '<td>' + tvuhs[index_p][index_t][index_tvuhs] + '</td>';         // add the <td> cells
// console.log('t:'+index_t+' p:'+index_p+'   tvuhs:'+index_tvuhs+' tvuhs[index_p][index_t][index_tvuhs]:'+tvuhs[index_p][index_t][index_tvuhs]);
            };
         }
         else {									// no more rows for this pressure. fill in the table with a row of empty cells for consistency in the table.
            tvuhs_tmp += '<th></th>' + '<td></td>'.repeat(tvuhs[index_p][0].length - 1);
         }
      }; // end for index_p
      ptvuhsHTML += tvuhs_tmp + '</tr>';	// end the sub row
   }; // end for index_t
   ptvuhsHTML += '</tbody>';  // end building the table innards

// console.log(ptvuhsHTML)
// write a nifty function call to use ptvuhsHTML withouth having to assemble it

const ptvuhsHTMLjs = 'function ptvuhsHTMLjs() {return \''+ptvuhsHTML+'\';}' ;

download('ptvuhsHTML.js', ptvuhsHTMLjs);
console.log('tvuhs:'+tvuhs);

   return ptvuhsHTML;
}


function download(filename, text) {
    var pom = document.createElement('a');
    pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    pom.setAttribute('download', filename);

    if (document.createEvent) {
        var event = document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    }
    else {
        pom.click();
    }
}
