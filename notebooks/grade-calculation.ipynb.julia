{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " <div style=\"display:inline-block; position:absolute; top:0; right:0; color: #230e3e; font:italic 1em serif;\">$\\LaTeX$<span style=\"display:inline-block; vertical-align:bottom\">\n",
    "    <a href=\"https://www.mathjax.org\">\n",
    "    <img style=\"height:1.5em\" title=\"Powered by MathJax\"\n",
    "    src=\"https://www.mathjax.org/badge/mj_logo.png\"\n",
    "    border=\"0\" alt=\"Powered by MathJax\" >\n",
    "</a></span></div>\n",
    "<div style=\"display:inline-block; position:absolute; top:0; left:0; color: #230e3e; font:italic 1em serif;\"><a href=\"https://www.julialang.org\">\n",
    "    <img style=\"height:2.25em; vertical-align:top\" title=\"Powered by Julia\"\n",
    "    src=\"./figures/julia-logo-mask.png\"\n",
    "    border=\"0\" alt=\"Powered by Julia\" >\n",
    "</a></div>\n",
    "$\\require{cancel} \\require{mhchem} \\require{bbox} \\require{color} \\require{enclose} \\require{AMSmath} \\require{AMSsymbols}$ \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<link rel='stylesheet' href='./css/youcan-how-your-grade-is-calculated.css' type='text/css' charset='utf-8' />"
      ],
      "text/plain": [
       "HTML{String}(\"<link rel='stylesheet' href='./css/youcan-how-your-grade-is-calculated.css' type='text/css' charset='utf-8' />\")"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Jupyter notebook housekeeping\n",
    "HTML(\"<link rel='stylesheet' href='./css/youcan-how-your-grade-is-calculated.css' type='text/css' charset='utf-8' />\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How your grade is calculated.\n",
    "\n",
    "Your grade is a weighted average of your Tests, Homework, and Final Exam scores, as follows:  \n",
    "\n",
    "\n",
    "\\begin{gather} \\notag \\\\ \\notag\n",
    " \\textbf{GRADE} = 50 \\times \\textbf{TESTS} + 25 \\times \\textbf{HOMEWORKS} + 25 \\times \\textbf{FINAL}\n",
    " \\\\[6pt] \\notag \\\n",
    "\\end{gather}\n",
    "\n",
    "Here is how it works, with a demo example. Farther down the page are live cells that you can use with your numbers.  \n",
    " \n",
    "**HOMEWORKS** comes straight from WileyPLUS.\n",
    "```julia\n",
    "HOMEWORK = 0.98\n",
    "```\n",
    "**FINAL** is self-explanatory.\n",
    "```julia\n",
    "FINAL = 0.95\n",
    "```\n",
    "**TESTS** requires a few intermediate calculations:\n",
    "\n",
    "1. This drops the lowest test score, then calcuates the average.  \n",
    "$ \\qquad\n",
    "\\begin{gather} \\notag \\\\ \\notag\n",
    "\\textbf{DROP} = \\frac{\\text{sum} \\left\\{T_1, T_2, T_3, T_4 \\right\\} - \\text{minimum} \\left\\{T_1, T_2, T_3, T_4 \\right\\}}{3}\n",
    "\\\\[6pt] \\notag \\\n",
    "\\end{gather}\n",
    "$  \n",
    "1. This replaces the lowest test score with FINAL if FINAL > lowest score, then calcuates the average. \n",
    "$ \\qquad\n",
    "\\begin{gather} \\notag \\\\ \\notag\n",
    "\\textbf{REPLACE} = \\frac{\\text{sum} \\left\\{T_1, T_2, T_3, T_4, \\textbf{FINAL} \\right\\} - \\text{minimum} \\left\\{T_1, T_2, T_3, T_4,\\textbf{FINAL} \\right\\}}{4}\n",
    "\\\\[6pt] \\notag \\\n",
    "\\end{gather} \n",
    "$\n",
    "1. Wrapping up,  \n",
    "$ \\qquad\n",
    "\\begin{gather} \\notag \\\\ \\notag\n",
    "\\textbf{TESTS} \\text{ = maximum\\{} \\textbf{DROP, REPLACE} \\}\n",
    "\\\\[6pt] \\notag \\\n",
    "\\end{gather}\n",
    "$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "letter_grade (generic function with 1 method)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function letter_grade(score)\n",
    "    lg_map = [97 \"A+\"; 92 \"A\"; 90 \"A-\"; 87 \"B+\"; 82 \"B\"; 80 \"B-\"; 77 \"C+\"; 72 \"C\"; 70 \"C-\"; 67 \"D+\"; 62 \"D\"; 60 \"D-\"; 0 \"F\"]\n",
    "    lg_map[findfirst(floor(score+0.5) ./ lg_map[:,1] .>= 1),2]\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4-element Array{Float64,1}:\n",
       " 0.83\n",
       " 0.71\n",
       " 0.89\n",
       " 0.97"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HOMEWORK = 0.98\n",
    "FINAL = 0.95\n",
    "T = [83; 71; 89; 97] / 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8500000000000001"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(T)/4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8966666666666668"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DROP = (sum(T) - minimum(T)) / 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5-element Array{Float64,1}:\n",
       " 0.83\n",
       " 0.71\n",
       " 0.89\n",
       " 0.97\n",
       " 0.95"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[T; FINAL]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9100000000000001"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "REPLACE = sum([T; FINAL]) - minimum([T; FINAL])  \n",
    "REPLACE = REPLACE / 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9100000000000001"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TESTS = max( DROP, REPLACE )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "93.75"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GRADE = 25*HOMEWORK + 50*TESTS + 25*FINAL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"A\""
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "letter_grade(GRADE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "<div class=\"btn-info\">&nbsp;<div class=\"badge\"></div><i class=\"fa fa-exclamation-circle\"></i><strong> Here is a compact version that's a bit less clunky to use.</strong></div>\n",
    "<div class=\"panel-info\"><div class=\"panel-heading\"></div></div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GRADE: 93.75 => A"
     ]
    }
   ],
   "source": [
    "HOMEWORK = 0.98\n",
    "FINAL = 0.95\n",
    "T = [83; 71; 89; 97] / 100\n",
    "\n",
    "DROP = (sum(T) - minimum(T)) / 3\n",
    "REPLACE = (( sum([T; FINAL]) - minimum([T; FINAL]) )) / 4\n",
    "TESTS = max( DROP, REPLACE )\n",
    "GRADE = 25*HOMEWORK + 50*TESTS + 25*FINAL\n",
    "\n",
    "print(\"GRADE: \",GRADE,\" => \",letter_grade(GRADE))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## letter_grade(score)\n",
    "\n",
    "\n",
    "Implements this lookup table to find the letter grade corresponding to a score.\n",
    "\n",
    "  | score | grade |\n",
    "  |:-----:|:-----:|\n",
    "  |   97  |   A+  |\n",
    "  |   92  |   A   |\n",
    "  |   90  |   A-  |\n",
    "  |   87  |   B+  |\n",
    "  |   82  |   B   |\n",
    "  |   80  |   B-  |\n",
    "  |   77  |   C+  |\n",
    "  |   72  |   C   |\n",
    "  |   70  |   C-  |\n",
    "  |   67  |   D+  |\n",
    "  |   62  |   D   | \n",
    "  |   60  |   D-  |\n",
    "  |    0  |   F   |\n",
    "\n",
    "\n",
    "### Examples\n",
    "\n",
    "```julia-repl\n",
    "\n",
    "julia> letter_grade(86.5)\n",
    "B+\n",
    "\n",
    "julia> letter_grade(103)\n",
    "A+\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| This | is   |\n",
    "|-|------|\n",
    "|   a  | ptable|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Name | Description | age         \n",
    "| :---: :|-------------: | :-:\n",
    "|Mary| She is a nice girl.  | 20\n",
    "| Jackie Junior | He is a very naughty boy. | 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Centered, Right-Justified, and Regular Cells and Headers**:   \n",
    "\n",
    "centered header | regular header | right-justified header | centered header | regular header  \n",
    ":-:|-|-:|:-:|-  \n",
    "centered cell|regular cell|right-justified cell|centered cell|regular cell  \n",
    "centered cell|regular cell|right-justified cell|centered cell|regular cell  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  grade|A+|A |A-|B+|B |B-|C+|C |C-|D+|D |D-|F\n",
    "  -----|--|:-|--|--|--|--|--|--|--|--|--|--|-\n",
    "  score|97|92|90|87|82|80|77|72|70|67|62|60|0\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<footer style=\"background-color: #461d7c; color:rgba(253,208,35,0.35); line-height:2em; padding-left:1em; padding-right:0.5em; bottom:0; float:bottom; text-align:right;\"><i>ψᵟ</i></footer>"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Julia 1.0.2",
   "language": "julia",
   "name": "julia-1.0"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.0.2"
  },
  "nteract": {
   "version": "0.11.6"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
